{"version":3,"sources":["storyNodes.tsx","StoryNode.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["storyNodes","nodeID","storyText","options","optionTitle","connectingNodeID","StoryNode","props","node","id","length","map","n","onClick","optionWasSelected","restartStoryButtonWasPressed","initialState","currentNode","allNodes","App","useState","state","setState","option","newNode","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAaA,G,MAAa,CACxB,CACEC,OAAQ,EACRC,UAAW,qFACXC,QAAS,CACP,CAAEC,YAAa,eAAgBC,iBAAkB,GACjD,CAAED,YAAa,eAAgBC,iBAAkB,KAGrD,CACEJ,OAAQ,EACRC,UAAW,gCACXC,QAAS,CACP,CAAEC,YAAa,oBAAqBC,iBAAkB,GACtD,CAAED,YAAa,2BAA4BC,iBAAkB,KAGjE,CACEJ,OAAQ,EACRC,UAAW,sEACXC,QAAS,CACP,CAAEC,YAAa,6BAA8BC,iBAAkB,GAC/D,CAAED,YAAa,iBAAkBC,iBAAkB,KAGvD,CACEJ,OAAQ,EACRC,UAAW,+CACXC,QAAS,IAGX,CACEF,OAAQ,EACRC,UAAW,qCACXC,QAAS,IAGX,CACEF,OAAQ,EACRC,UAAW,gCACXC,QAAS,IAGX,CACEF,OAAQ,EACRC,UAAW,eACXC,QAAS,M,OCrCAG,EAAY,SAACC,GAExB,OACE,gCACE,4BAAIA,EAAMC,KAAKN,YACf,sBAAKO,GAAG,UAAR,UACIF,EAAMC,KAAKL,QAAQO,OAAS,GAAKH,EAAMC,KAAKL,QAAQQ,KAAK,SAAAC,GAAC,OAAI,wBAAQC,QAAS,kBAAMN,EAAMO,kBAAkBF,EAAEP,mBAAjD,SAAqEO,EAAER,iBACvG,IAA9BG,EAAMC,KAAKL,QAAQO,QAAgB,wBAAQG,QAAS,kBAAMN,EAAMQ,gCAA7B,kCCKvCC,EAA0B,CAC9BC,YAAajB,EAAW,GACxBkB,SAAUlB,GAGCmB,EAAM,WAEjB,IASA,EAA0BC,mBAASJ,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEA,OACE,sBAAKb,GAAG,OAAR,UACA,oBAAIA,GAAG,eAAP,yCACE,cAAC,EAAD,CAAWD,KAAMa,EAAMJ,YAAaF,6BAdH,WACnCO,GAAS,8BAAC,eAAUD,GAAX,IAAkBJ,YAAaI,EAAMH,SAAS,SAa2CJ,kBAV1E,SAACS,GACzB,IAAMC,EAAUH,EAAMH,SAASO,QAAQ,SAAAb,GAAC,OAAIA,EAAEX,SAAWsB,KAAQ,GACjED,GAAU,8BAAC,eAAWD,GAAZ,IAAmBJ,YAAaO,cCpB/BE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f32fe0c.chunk.js","sourcesContent":["export const storyNodes = [\n  {\n    nodeID: 1,\n    storyText: \"It is mega freaking dark. Uh Oh. You accidentally stood on sludge. What do you do?\",\n    options: [\n      { optionTitle: \"Taste Sludge\", connectingNodeID: 2 },\n      { optionTitle: \"Sniff Sludge\", connectingNodeID: 3 }\n    ]\n  },\n  {\n    nodeID: 2,\n    storyText: \"Sludge taste like poo. Uh oh!\",\n    options: [\n      { optionTitle: \"Spit poo on floor\", connectingNodeID: 4 },\n      { optionTitle: \"Swallow poo taste sludge\", connectingNodeID: 5 }\n    ]\n  },\n  {\n    nodeID: 3,\n    storyText: \"The sludge smells like your Mum's butt. Haha loser. What do you do?\",\n    options: [\n      { optionTitle: \"Cry and punch self in face\", connectingNodeID: 6 },\n      { optionTitle: \"Punch your mum\", connectingNodeID: 7 }\n    ]\n  },\n  {\n    nodeID: 4,\n    storyText: \"You spit poo on floor then slip in poo n die\",\n    options: [\n    ]\n  },\n  {\n    nodeID: 5,\n    storyText: \"Is poison poo so u r dead haha lol\",\n    options: [\n    ]\n  },\n  {\n    nodeID: 6,\n    storyText: \"You punch ur own face n u die\",\n    options: [\n    ]\n  },\n  {\n    nodeID: 7,\n    storyText: \"Your mum cry\",\n    options: [\n    ]\n  }\n]\n\n//yarn run deploy","import React, { useState } from 'react';\nimport { SNode } from './App';\n\ninterface StoryNodeProps {\n  node: SNode\n  restartStoryButtonWasPressed: () => void\n  optionWasSelected: (option: number) => void\n}\n\nexport const StoryNode = (props: StoryNodeProps) => {\n\n  return (  \n    <div>\n      <p>{props.node.storyText}</p>\n      <div id=\"options\">\n        { props.node.options.length > 0 && props.node.options.map( n => <button onClick={() => props.optionWasSelected(n.connectingNodeID)}>{n.optionTitle}</button>)}\n        { props.node.options.length === 0 && <button onClick={() => props.restartStoryButtonWasPressed()}>Restart Story</button> }\n        </div>\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { storyNodes } from './storyNodes';\nimport { StoryNode } from './StoryNode';\n\nexport interface SNode {\n  nodeID: number\n  storyText: string\n  options: Option[]\n}\n\ninterface Option {\n  optionTitle: string\n  connectingNodeID: number\n}\n\ninterface GameState {\n  currentNode: SNode\n  allNodes: SNode[]\n}\n\nconst initialState: GameState = {\n  currentNode: storyNodes[0],\n  allNodes: storyNodes\n}\n\nexport const App = () => {\n\n  const restartStoryButtonWasPressed = () => {\n    setState(() => ({...state, currentNode: state.allNodes[0]}))\n  }\n\n  const optionWasSelected = (option: number) => {\n    const newNode = state.allNodes.filter( n => n.nodeID === option)[0]\n    setState( () => ( {...state, currentNode: newNode} ) )\n  }\n\n  const [state, setState] = useState(initialState)\n\n  return (\n    <div id=\"page\">\n    <h1 id=\"main-heading\">EXTRA MEGA TERRIFYING STORY</h1>\n      <StoryNode node={state.currentNode} restartStoryButtonWasPressed={restartStoryButtonWasPressed} optionWasSelected={optionWasSelected}></StoryNode>\n    </div>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}